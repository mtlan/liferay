/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.contact.model.impl;

import com.contact.model.Department;
import com.contact.model.DepartmentModel;
import com.contact.model.DepartmentSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Department service. Represents a row in the &quot;Contact_Department&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DepartmentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DepartmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DepartmentImpl
 * @generated
 */
@JSON(strict = true)
public class DepartmentModelImpl
	extends BaseModelImpl<Department> implements DepartmentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a department model instance should use the <code>Department</code> interface instead.
	 */
	public static final String TABLE_NAME = "Contact_Department";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"dptId", Types.BIGINT},
		{"dptName", Types.VARCHAR}, {"dptDesc", Types.VARCHAR},
		{"dptStatus", Types.BIGINT}, {"dptDelete", Types.BIGINT},
		{"dptcreateDate", Types.TIMESTAMP}, {"dptmodifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dptId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dptName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dptDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dptStatus", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dptDelete", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dptcreateDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dptmodifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Contact_Department (uuid_ VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,dptId LONG not null primary key,dptName VARCHAR(75) null,dptDesc VARCHAR(75) null,dptStatus LONG,dptDelete LONG,dptcreateDate DATE null,dptmodifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Contact_Department";

	public static final String ORDER_BY_JPQL =
		" ORDER BY department.dptId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Contact_Department.dptId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DPTNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DPTID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Department toModel(DepartmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Department model = new DepartmentImpl();

		model.setUuid(soapModel.getUuid());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setDptId(soapModel.getDptId());
		model.setDptName(soapModel.getDptName());
		model.setDptDesc(soapModel.getDptDesc());
		model.setDptStatus(soapModel.getDptStatus());
		model.setDptDelete(soapModel.getDptDelete());
		model.setDptcreateDate(soapModel.getDptcreateDate());
		model.setDptmodifiedDate(soapModel.getDptmodifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Department> toModels(DepartmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Department> models = new ArrayList<Department>(soapModels.length);

		for (DepartmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DepartmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dptId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDptId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dptId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Department.class;
	}

	@Override
	public String getModelClassName() {
		return Department.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Department, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Department, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Department, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Department)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Department, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Department, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Department)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Department, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Department, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Department, Object>>
		_attributeGetterFunctions;

	static {
		Map<String, Function<Department, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Department, Object>>();

		attributeGetterFunctions.put("uuid", Department::getUuid);
		attributeGetterFunctions.put("groupId", Department::getGroupId);
		attributeGetterFunctions.put("companyId", Department::getCompanyId);
		attributeGetterFunctions.put("userId", Department::getUserId);
		attributeGetterFunctions.put("userName", Department::getUserName);
		attributeGetterFunctions.put("dptId", Department::getDptId);
		attributeGetterFunctions.put("dptName", Department::getDptName);
		attributeGetterFunctions.put("dptDesc", Department::getDptDesc);
		attributeGetterFunctions.put("dptStatus", Department::getDptStatus);
		attributeGetterFunctions.put("dptDelete", Department::getDptDelete);
		attributeGetterFunctions.put(
			"dptcreateDate", Department::getDptcreateDate);
		attributeGetterFunctions.put(
			"dptmodifiedDate", Department::getDptmodifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
	}

	private static final Map<String, BiConsumer<Department, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, BiConsumer<Department, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Department, ?>>();

		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Department, String>)Department::setUuid);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Department, Long>)Department::setGroupId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<Department, Long>)Department::setCompanyId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Department, Long>)Department::setUserId);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<Department, String>)Department::setUserName);
		attributeSetterBiConsumers.put(
			"dptId", (BiConsumer<Department, Long>)Department::setDptId);
		attributeSetterBiConsumers.put(
			"dptName", (BiConsumer<Department, String>)Department::setDptName);
		attributeSetterBiConsumers.put(
			"dptDesc", (BiConsumer<Department, String>)Department::setDptDesc);
		attributeSetterBiConsumers.put(
			"dptStatus",
			(BiConsumer<Department, Long>)Department::setDptStatus);
		attributeSetterBiConsumers.put(
			"dptDelete",
			(BiConsumer<Department, Long>)Department::setDptDelete);
		attributeSetterBiConsumers.put(
			"dptcreateDate",
			(BiConsumer<Department, Date>)Department::setDptcreateDate);
		attributeSetterBiConsumers.put(
			"dptmodifiedDate",
			(BiConsumer<Department, Date>)Department::setDptmodifiedDate);

		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public long getDptId() {
		return _dptId;
	}

	@Override
	public void setDptId(long dptId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dptId = dptId;
	}

	@JSON
	@Override
	public String getDptName() {
		if (_dptName == null) {
			return "";
		}
		else {
			return _dptName;
		}
	}

	@Override
	public void setDptName(String dptName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dptName = dptName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDptName() {
		return getColumnOriginalValue("dptName");
	}

	@JSON
	@Override
	public String getDptDesc() {
		if (_dptDesc == null) {
			return "";
		}
		else {
			return _dptDesc;
		}
	}

	@Override
	public void setDptDesc(String dptDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dptDesc = dptDesc;
	}

	@JSON
	@Override
	public long getDptStatus() {
		return _dptStatus;
	}

	@Override
	public void setDptStatus(long dptStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dptStatus = dptStatus;
	}

	@JSON
	@Override
	public long getDptDelete() {
		return _dptDelete;
	}

	@Override
	public void setDptDelete(long dptDelete) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dptDelete = dptDelete;
	}

	@JSON
	@Override
	public Date getDptcreateDate() {
		return _dptcreateDate;
	}

	@Override
	public void setDptcreateDate(Date dptcreateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dptcreateDate = dptcreateDate;
	}

	@JSON
	@Override
	public Date getDptmodifiedDate() {
		return _dptmodifiedDate;
	}

	@Override
	public void setDptmodifiedDate(Date dptmodifiedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dptmodifiedDate = dptmodifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Department.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Department toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Department>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DepartmentImpl departmentImpl = new DepartmentImpl();

		departmentImpl.setUuid(getUuid());
		departmentImpl.setGroupId(getGroupId());
		departmentImpl.setCompanyId(getCompanyId());
		departmentImpl.setUserId(getUserId());
		departmentImpl.setUserName(getUserName());
		departmentImpl.setDptId(getDptId());
		departmentImpl.setDptName(getDptName());
		departmentImpl.setDptDesc(getDptDesc());
		departmentImpl.setDptStatus(getDptStatus());
		departmentImpl.setDptDelete(getDptDelete());
		departmentImpl.setDptcreateDate(getDptcreateDate());
		departmentImpl.setDptmodifiedDate(getDptmodifiedDate());

		departmentImpl.resetOriginalValues();

		return departmentImpl;
	}

	@Override
	public int compareTo(Department department) {
		int value = 0;

		if (getDptId() < department.getDptId()) {
			value = -1;
		}
		else if (getDptId() > department.getDptId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Department)) {
			return false;
		}

		Department department = (Department)object;

		long primaryKey = department.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Department> toCacheModel() {
		DepartmentCacheModel departmentCacheModel = new DepartmentCacheModel();

		departmentCacheModel.uuid = getUuid();

		String uuid = departmentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			departmentCacheModel.uuid = null;
		}

		departmentCacheModel.groupId = getGroupId();

		departmentCacheModel.companyId = getCompanyId();

		departmentCacheModel.userId = getUserId();

		departmentCacheModel.userName = getUserName();

		String userName = departmentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			departmentCacheModel.userName = null;
		}

		departmentCacheModel.dptId = getDptId();

		departmentCacheModel.dptName = getDptName();

		String dptName = departmentCacheModel.dptName;

		if ((dptName != null) && (dptName.length() == 0)) {
			departmentCacheModel.dptName = null;
		}

		departmentCacheModel.dptDesc = getDptDesc();

		String dptDesc = departmentCacheModel.dptDesc;

		if ((dptDesc != null) && (dptDesc.length() == 0)) {
			departmentCacheModel.dptDesc = null;
		}

		departmentCacheModel.dptStatus = getDptStatus();

		departmentCacheModel.dptDelete = getDptDelete();

		Date dptcreateDate = getDptcreateDate();

		if (dptcreateDate != null) {
			departmentCacheModel.dptcreateDate = dptcreateDate.getTime();
		}
		else {
			departmentCacheModel.dptcreateDate = Long.MIN_VALUE;
		}

		Date dptmodifiedDate = getDptmodifiedDate();

		if (dptmodifiedDate != null) {
			departmentCacheModel.dptmodifiedDate = dptmodifiedDate.getTime();
		}
		else {
			departmentCacheModel.dptmodifiedDate = Long.MIN_VALUE;
		}

		return departmentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Department, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Department, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Department, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Department)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Department, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Department, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Department, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Department)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Department>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Department.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private long _dptId;
	private String _dptName;
	private String _dptDesc;
	private long _dptStatus;
	private long _dptDelete;
	private Date _dptcreateDate;
	private Date _dptmodifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Department, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Department)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("dptId", _dptId);
		_columnOriginalValues.put("dptName", _dptName);
		_columnOriginalValues.put("dptDesc", _dptDesc);
		_columnOriginalValues.put("dptStatus", _dptStatus);
		_columnOriginalValues.put("dptDelete", _dptDelete);
		_columnOriginalValues.put("dptcreateDate", _dptcreateDate);
		_columnOriginalValues.put("dptmodifiedDate", _dptmodifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("dptId", 32L);

		columnBitmasks.put("dptName", 64L);

		columnBitmasks.put("dptDesc", 128L);

		columnBitmasks.put("dptStatus", 256L);

		columnBitmasks.put("dptDelete", 512L);

		columnBitmasks.put("dptcreateDate", 1024L);

		columnBitmasks.put("dptmodifiedDate", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Department _escapedModel;

}